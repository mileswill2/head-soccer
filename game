size(400, 400, 1);

//Bitmoji Code
var milesDrawBitmojiBody = function(x,y,h){
//body,coat
strokeWeight(h*0.03);
fill(22,87,24);
rect(x-h*0.62,y+h*0.84,h*1.24,h*0.76,h*0.27);

//hood
fill(22, 87, 24);
noStroke();
rect(x-h*0.33,y+h*0.36,h*0.66,h*0.675,h*0.20);
ellipse(x,y+h*0.43,h*0.68,h*0.84);

//initials
//M
strokeWeight(h*0.04);
stroke(0, 153, 255);
line(x-h*0.54,y+h*1.40,x-h*0.43,y+h*1.06);
line(x-h*0.43,y+h*1.06,x-h*0.32,y+h*1.40);
line(x-h*0.32,y+h*1.40,x-h*0.21,y+h*1.06);
line(x-h*0.21,y+h*1.06,x-h*0.10,y+h*1.40);
//W
line(x+h*0.10,y+h*1.06,x+h*0.21,y+h*1.40);
line(x+h*0.21,y+h*1.40,x+h*0.32,y+h*1.06);
line(x+h*0.32,y+h*1.06,x+h*0.43,y+h*1.40);
line(x+h*0.43,y+h*1.40,x+h*0.54,y+h*1.06);

noStroke();
};

var milesDrawBtimojiHead = function(x,y,h){
//head
noStroke();
fill(235, 191, 97);
ellipse(x,y+h*0.47,h*0.55,h*0.70);

//eyes
strokeWeight(h*0.015);
stroke(0,0,0);
fill(255, 255, 255);
ellipse(x-h*0.11,y+h*0.43,h*0.10,h*0.06);//whites
ellipse(x+h*0.11,y+h*0.43,h*0.10,h*0.06);
//iris
noStroke();
fill(21, 57, 130);
ellipse(x-h*0.11,y+h*0.43,h*0.04,h*0.04);
ellipse(x+h*0.105,y+h*0.43,h*0.04,h*0.04);
//pupils
fill(0,0,0);
ellipse(x-h*0.11,y+h*0.43,h*0.01,h*0.01);
ellipse(x+h*0.11,y+h*0.43,h*0.01,h*0.01);

//eye brows
stroke(66, 24, 1);
strokeWeight(h*0.015);
fill(0,0,0,0);
arc(x-h*0.12,y+h*0.42,h*0.15,h*0.12,212,339);
arc(x+h*0.11,y+h*0.42,h*0.15,h*0.17,197,331);

//furrowed brow
stroke(41, 27, 8);
strokeWeight(h*0.005);
fill(245, 207, 147);
arc(x+h*0.08,y+h*0.28,h*0.12,h*0.02,-180,0); 
arc(x+h*0.07,y+h*0.26,h*0.12,h*0.02,-170,0); 
arc(x+h*0.08,y+h*0.30,h*0.11,h*0.02,-180,0); 

//hair
noStroke();
fill(102, 41, 8);
arc(x-h*0.04,y+h*0.25,h*0.23,h*0.24,68,303);
rect(x-h*0.17,y+h*0.15,h*0.17,h*0.13,10);
ellipse(x+h*0.03,y+h*0.17,h*0.23,h*0.09);

//shadows in hood
fill(0, 0, 0);
rect(x-h*0.23,y+h*0.65,h*0.46,h*0.25);
stroke(0, 0, 0);
strokeWeight(h*0.04);
line(x-h*0.24,y+h*1.00,x-h*0.27,y+h*0.44);
line(x+h*0.24,y+h*1.00,x+h*0.27,y+h*0.44);
fill(235, 191, 97,0);
strokeWeight(h*0.05);
arc(x,y+h*0.49,h*0.53,h*0.76,190,350);


//zipper
fill(0,0,0);
stroke(2);
strokeWeight(h*0.05);
line(x,y+h*1.50,x,y+h*0.74);

//neck
noStroke();
fill(133, 102, 53);
rect(x-h*0.14,y+h*0.72,h*0.27,h*0.20);

//collar
stroke(0, 0, 0);
fill(22, 87, 24,0);
arc(x,y+h*0.83,h*0.50,h*0.17,-20,200);


//nose
strokeWeight(h*0.01);
stroke(186, 104, 31);
fill(0,0,0,0);
arc(x,y+h*0.53,h*0.07,h*0.15,-192,24);

//mask
stroke(0, 0, 0);
fill(56, 49, 49);
arc(x,y+h*0.485,h*0.49,h*0.71,5,175);
stroke(207, 142, 37);
strokeWeight(h*0.05);
point(x+h*0.14,y+h*0.56);
point(x-h*0.09,y+h*0.64);
point(x+h*0.16,y+h*0.66);
point(x-h*0.16,y+h*0.56);
point(x,y+h*0.54);
point(x+h*0.09,y+h*0.76);
point(x-h*0.09,y+h*0.74);
point(x+h*0.05,y+h*0.66);
stroke(0,0,0);
strokeWeight(h*0.03);
line(x-h*0.27,y+h*0.53,x,y+h*0.50);
line(x+h*0.27,y+h*0.53,x,y+h*0.50);
noStroke();

};

var milesDrawBitmoji = function(bitmojiX,bitmojiY,bitmojiH){
    noStroke();
    milesDrawBitmojiBody(bitmojiX,bitmojiY,bitmojiH);
    milesDrawBtimojiHead(bitmojiX,bitmojiY,bitmojiH);
    //stroke(255, 0, 0);
    //line(bitmojiX-30, bitmojiY + 40, bitmojiX + 30, bitmojiY + 40);
    //line(bitmojiX, bitmojiY, bitmojiX, bitmojiY + 80);
};

var seanBitmoji = function(x, y, h){
    noStroke();
    fill(255,205,148); //skin tone
    ellipse(x-(h/150), y-(h/150), h/150*87, h/150*100); //head
    fill(150, 75, 0);
    //brown hair
    quad(x-(h/150*50), y-(h/150), x-(h/150*37), y-(h/150*32), x-(h/150), y-(h/150*50), x-(h/150*30), y+(h/150*12));//left hair
    quad(x+(h/150*49), y-(h/150*2), x+(h/150*34), y-(h/150*32), x+(h/150*13), y-(h/150*50), x+(h/150*35), y+(h/150*14));//right hair
    ellipse(x-(h/150), y-(h/150*37), h/150*62, h/150*28); //top hair
    strokeWeight(1);
    stroke(0, 0, 0);
    fill(150, 75, 0);//brown eyes fill
    ellipse(x-(h/150*10), y-(h/150), h/150*6, h/150*4); //left eye
    ellipse(x+(h/150*12), y-(h/150), h/150*6, h/150*4); //right eye
    fill(255,205,148); //skin tone
    bezier(x,y,x+(h/150*21),y+h/150*22,x-h/150*8,y+h/150*20,x-h/150*4,y+h/150*15);//nose
    
    fill(255, 255, 255);//white fill for teeth
    arc(x+(h/150*1), y+(h/150*25), h/150*30, h/150*13,1,180);//mouth
    line(x-(h/150*15), y+(h/150*26), x+(h/150*16), y+(h/150*24)); //top of mouth
    fill(63, 51, 77);
    noStroke();
    quad(x-(h/150*35), y+(h/150*82), x+(h/150*45), y+(h/150*83), x+(h/150*45), y+(h/150*69), x-(h/150*39), y+(h/150*35));
    quad(x-(h/150*31), y+(h/150*80), x+(h/150*52), y+(h/150*25), x+(h/150*48), y+(h/150*85), x-(h/150*33), y+(h/150*83));
    fill(5, 5, 5);
    
    arc(x+(h/150*2), y-(h/150*41), h/150*63, h/150*29, 182, 360);
    rect(x-(h/150*31), y-(h/150*34), h/150*66, h/150*16);
    rect(x-(h/150*32),y-(h/150*29),h/150*23,h/150*-13);
    rect(x+(h/150*15), y-(h/150*28), h/150*19, h/150*-13);
    fill(150, 75, 0);
    fill(43, 240, 73);
    textSize(h/150*22);
    text("SF", x-(h/150*11),y+(h/150*62),h/150*265,h/150*220);

};

//power Up Graphics
var drawLightning = function(x, y, h) {
    fill(255, 251, 0);
    noStroke();
    ellipse(x, y, h*0.8, h*0.8);
    stroke(0, 0, 0);
    strokeWeight(h/50);
    line(x, y - h*0.20, x + h*0.22, y- h*0.20);
    line(x, y - h*0.20, x - h*0.27, y + h*0.27);
    line(x + h*0.04, y + h*0.02, x - h*0.28, y + h*0.28);
    line(x + h*0.04, y + h*0.02, x + h*0.03, y - h*0.07);
    line(x + h*0.04, y - h*0.07, x + h*0.23, y - h*0.20);
};

var drawStrength = function(x, y, h) {
    noStroke();
    fill(255, 0, 0);
    ellipse(x, y, h*0.8, h*0.8);
    fill(255, 251, 0);
    rect(x - h*0.11, y + h*0.07, h*0.4, h*0.13, h*0.06);
    rect(x - h*0.17, y - h*0.20, h*0.15, h*0.4, h*0.06);
    arc(x + h*0.08, y + h*0.13, h*0.38, h*0.3, 180, 360);
    ellipse(x - h*0.04, y - h*0.20, h*0.03, h*0.07);
    ellipse(x - h*0.12, y - h*0.21, h*0.03, h*0.07);
    ellipse(x - h*0.08, y - h*0.21, h*0.03, h*0.07);
    ellipse(x - h*0.16, y - h*0.19, h*0.03, h*0.07);
};

var drawSize = function(x, y, h) {
    fill(60, 0, 255);
    noStroke();
    ellipse(x, y, h*0.80, h*0.80);
    fill(5, 5, 5);
    rect(x - h*0.14, y + h*0.02, h * 0.07, h * 0.15);
    triangle(x - h*0.01, y , x - h*0.19, y, x - h*0.11, y - h*0.19);
    rect(x + h*0.12, y + h*0.02, h * 0.07, h * 0.15);
    triangle(x + h*0.25, y , x  + h*0.06, y, x + h*0.16, y - h*0.19);
};

//global variables
var goalTime;
var stopGoalTime = null;
var scene = 0;
var startTime;

//timer function
var timer = function() {
    //takes difference in current frame count and start time
    var time = frameCount - startTime;
    //if it has be 90 or more seconds scene 3 is displayed
    if (time/60 >= 90) {
        scene = 3;
    }
    return time;
};

//Button code from khan
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

//Method to draw button
Button.prototype.draw = function() {
    fill(0, 234, 255);
    rectMode(CORNER);
    rect(this.x, this.y, this.width, this.height, 23);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

//Method to check if mouse is clicked inside the button
Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

//Function that produces an onclick if the button is pressed on
Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

//player class
var Player = function (config) {
    this.name = config.name || "default Player";
    this.x = config.x || 200;
    this.xOriginal = config.x || 200;
    this.y = config.y || 200;
    this.size = config.size || 10;
    this.speed = config.speed || 3;
    this.jump = config.jump || 15;
    this.drawCharacter = config.drawCharacter || function() {};
    this.score = config.score || 0;
    this.xVeloctiy = config.xVelocity || 0;
    this.yVelocity = config.yVelocity || 0;
    this.jumpTime = config.jumpTime || null;
    this.kickPower = config.kickPower || 1;
    this.powerUpCollected = config.PowerUpCollected || false;
    this.powerUpTime = config.powerUpTime || null;
    this.powerUpType = config.powerUpType || null;
};

//Player instances

var sean = new Player({
    name: "Sean",
    x: 100,
    //xOriginal used in to reset positions after goal
    xOriginal: 100,
    y: 309,
    size: 69,
    drawCharacter: function() {
        seanBitmoji(this.x - 3, this.y + 45, this.size);
    }
});

var miles = new Player({
    name: "Miles",
    x: 300,
    //xOriginal used in to reset positions after goal
    xOriginal: 300,
    y: 309,
    size: 40,
    drawCharacter: function() {
        milesDrawBitmoji(this.x, this.y + 20, this.size);
    }
});

//players array
var players = [
    sean,
    miles
];

//Ball Class
var Ball = function(config) {
    this.x  = config.x || 200;
    this.y = config.y || 300;
    this.size = config.size || 30;
    this.xVelocity = config.xVelocity || 0;
    this.yVelocity = config.yVelocity || 0;
    this.collideTime = config.collideTime || 0;
};

//Ball instances
//default ball used in game, the rest in the splash and settings screen

var defaultBall = new Ball({
    xVelocity: 0
});

var displayBall = new Ball({
    x: 144,
    y: 357
});

var milesBall = new Ball({
    x: 272,
    y: 358
});

var settingsBall = new Ball({
    x: 140,
    y: 377,
    size: 50
});

//balls array
var balls = [
    defaultBall
];

//balls draw method
Ball.prototype.draw = function() {
    this.y = constrain(this.y, -200, 390 - this.size);
    this.x = constrain(this.x, this.size - 30, 430 - this.size);
    fill(255, 255, 255);
    stroke(0, 0, 0);
    strokeWeight(this.size * 0.03);
    ellipse(this.x, this.y, this.size, this.size);
    fill(0, 0, 0);
    //middle hexagon
    quad(this.x - this.size/6, this.y, this.x + this.size/6, this.y, this.x + this.size/10, this.y - this.size/6, this.x - this.size/10, this.y - this.size/6);
    quad(this.x - this.size/6, this.y, this.x + this.size/6, this.y, this.x + this.size/10, this.y + this.size/6, this.x - this.size/10, this.y + this.size/6);
    var offsetX = this.size * 0.34;
    var offsetY = this.size * 0.45;
    //bottom right hexagon
    triangle(this.x - this.size/6 + offsetX, this.y + offsetY, this.x + this.size/15 + offsetX, this.y - this.size/6 + offsetY, this.x - this.size/10 + offsetX, this.y - this.size/6 + offsetY);
    triangle(this.x - this.size/6 + offsetX, this.y - offsetY, this.x + this.size/17 + offsetX, this.y + this.size/6 - offsetY, this.x - this.size/10 + offsetX, this.y + this.size/6 - offsetY);
    //top left hexagon
    triangle(this.x + this.size/6 - offsetX, this.y - offsetY, this.x + this.size/10 - offsetX, this.y + this.size/6 - offsetY, this.x - this.size/16 - offsetX, this.y + this.size/6 - offsetY);
    //bottom left hexagon
    triangle(this.x + this.size/7 - offsetX, this.y + offsetY, this.x + this.size/10 - offsetX, this.y - this.size/6 + offsetY, this.x - this.size/16 - offsetX, this.y - this.size/6 + offsetY);
};

//draw shadow of ball method
Ball.prototype.drawShadow = function() {
    //size of shadow changes inversely with hight
    var shadowSize = (this.y) / 10;
    noStroke();
    fill(84, 84, 84, 100);
    //makes shadow an oval
    ellipse(this.x, 375, shadowSize,shadowSize / 5); 
};

Ball.prototype.move = function() {
    //if outside of distance between goals, sent back towards play
    if (this.x > 360 && this.y < 243) {
        this.xVelocity = -2;
    }
    else if (this.x < 40 && this.y < 243) {
        this.xVelocity = 2;
    }
    //x velocity added to x position
    this.x += this.xVelocity;
    if (this.y + - this.size < 390) {
        //collide time is when ball hit ground
        var t = (frameCount - this.collideTime) / 60;
        //acceleration due to "gravity" subtracted from velocity 
        //different accelerations for if the ball is moving up or down for better
        //game dynamic
        if (this.yVelocity > 0) {
            this.yVelocity -= 2.5 * t*t;
        } else {
            this.yVelocity -= 1 * t*t;
        }
    }
    this.yVelocity = constrain(this.yVelocity, -37, 37);
    //y velocity added to y position
    this.y -= this.yVelocity;
};

Ball.prototype.groundCollide = function() {
    //sets time of ground collide to current time in frame count
    this.collideTime = frameCount;
    //if y velocity is less than 100 the ball bounces at a third of the speed
    if (abs(this.yVelocity) < 100) {
        this.yVelocity = -this.yVelocity / 3;
    } else {
        //otherwise the velocity is positive 30
        this.yVelocity = 30;
    }
};

Ball.prototype.groundCollideDetect = function() {
    //returns true if ball hits "ground" 
    if (this.y + this.size >= 390) {
        return true;
    }
};

//Ball kick method
Ball.prototype.kicked = function() {
    //for each player if a kick is detected the ball's x velocity is becomes a constant toward the side that the ball hit the player and the y velocity becomes 10
    for (var i in players) {
        if (players[i].kickDetect()) {
            if (this.x < players[i].x) {
                this.xVelocity = -2 * players[i].kickPower;
            }
            else if (this.x > players[i].x) {
                this.xVelocity = 2 * players[i].kickPower;
            }
            this.yVelocity = 10;
        }
    }
};

Ball.prototype.goal = function() {
    //if a goal has not already been scored recently
    if (!stopGoalTime) {
        //if ball is in right goal, sean's goal and vice versa
        //goal time and stop goal time are reset
        if (this.x > 360 && this.y > 230) {
            sean.score ++;
            goalTime = frameCount;
            stopGoalTime = true;
        }
        else if (this.x < 40 && this.y > 230) {
            miles.score ++;
            goalTime = frameCount;
            stopGoalTime = true;
        }
    }
};

Ball.prototype.goalReset = function() {
    //1.5 seconds after goal ball resets 
    if (frameCount - goalTime === 90) {
        this.x = 200;
        this.y = 300;
        this.xVelocity = 0;
        stopGoalTime = false;
        return true;
    }
};

Ball.prototype.netCollide = function() {
    if (this.x + this.size > 360 && abs(243-this.y) < 20) {
        this.yVelocity = 0;
        if (this.y < 253 + this.size && this.yVelocity < 5) {
            this.xVelcity = -5;
            this.yVelocity = 10;
        }
    } 
    if (this.x + this.size < 40 && abs(243-this.y) < 20) {
        this.yVelocity = 0;
        if (this.y < 253 + this.size && this.yVelocity < 5) {
            this.xVelcity = 5;
            this.yVelocity = 10;
        }
    }  
};

var PowerUp = function(config) {
    this.type = config.type;
    this.x = config.x || 200;
    this.y = config.y || 200;
    this.shown = config.shown || false;  
};

//Power Ups array
var powerUps = [];

PowerUp.prototype.draw = function() {
    if (this.shown === true) {
        if (this.type === 0) {
            //draw Speed power up
            fill(255, 204, 0);
            drawLightning(this.x, this.y, 60);
        }
        else if (this.type === 1) {
            //draw strength power up
            fill(255, 0, 0);
            drawStrength(this.x, this.y, 60);
        }
        else if (this.type === 2) {
            //draw size power up
            fill(22, 37, 153);
            drawSize(this.x, this.y, 60);
        }
    }
    else if (this.shown === false) {
        this.y = 600;
    }
};

//Fills power Ups array every 20 seconds with random type and location and changes shown property to true
var powerUpGenerate = function() {
    if ((timer()/60) % 20 === 0) {
        powerUps.push(new PowerUp({
        type: round(random(0,2)),
        x: random(80, 320),
        y: random(200, 360),
        shown: true
        }));
    }
};

//Player Methods

//draw Player method
Player.prototype.drawCharacter = function() {
    this.x = constrain(this.x, 50, width - 50);
    this.y = constrain(this.y, 0, height - 60);
    this.drawCharacter();
};

//move Player methods
Player.prototype.characterJump = function() {
    if (this.y >= 147) {
        this.y -= this.jump;   
    }
    this.yVelocity += this.jump;
    this.jumpTime = frameCount;
};

Player.prototype.fall = function() {
    if (this.y <= 343) {
        var t = (frameCount - this.jumpTime) / 60;
        this.yVelocity = - 20 * t*t;
        this.y -= this.yVelocity;
    }
};

Player.prototype.left = function() {
    if (this.x > 40) {
        this.x -= this.speed;
        this.xVelocity -= this.speed;
    }
};

Player.prototype.right = function() {
    if (this.x < 360) {
        this.x += this.speed;
        this.xVelocity += this.speed;
    }
};

Player.prototype.kickDetect = function() {
    //println("kickdetect");
    if (sqrt(sq(this.x-defaultBall.x)+sq(this.y+70-defaultBall.y)) < 50) {
        return true;
    } else {
        return false;
    }
};

//draw shadow of player method
Player.prototype.drawShadow = function() {
    var shadowSize = (this.y) / 6;
    noStroke();
    fill(84, 84, 84, 100);
    ellipse(this.x, 387, shadowSize,shadowSize / 5); 
};

Player.prototype.powerUpCollision = function() {
    for (var i in powerUps) {
        var type = powerUps[i].type;
        //sqrt(sq(this.x-defaultBall.x)+sq(this.y+70-defaultBall.y)) < 50
        if (dist(this.x, this.y+70, powerUps[i].x, powerUps[i].y) < 30 && this.powerUpCollected === false) {
            this.powerUpCollected = true;
            this.powerUpsTime = frameCount;
            powerUps[i].shown = false;
            this.powerUpsType = type;
            //println(this.name + " power up collide");
            //println(this.powerUpCollected + " " + this.name);
        }
    }
};

Player.prototype.poweredUp = function() {
    var type = this.powerUpsType;
    if (floor((frameCount - this.powerUpsTime)/60) <= 5) {
        if (type === 0) {
            this.speed = 5;
        }
        else if (type === 1) {
            this.kickPower = 3;
        }
        else if (type === 2) {
            defaultBall.size = 50;
        }
    }
    else if (floor((frameCount - this.powerUpsTime)/60) > 5) {
        this.powerUpCollected = false;
        this.poweUpsType = null;
        this.speed = 3;
        this.kickPower = 1;
        defaultBall.size = 30;
    }
};

//start button
var startButton = new Button({
    x: 96,
    y: 105,
    width: 75,
    label: "Start",
    onClick: function() {
        scene = 1;
        startTime = frameCount;
        defaultBall.yVelocity = 0;
        defaultBall.y = 300;
    }
});

var settingsButton = new Button({
    x: 230,
    y: 105,
    width: 87,
    label: "Settings",
    onClick: function() {
        scene = 2;}
});

var backButton = new Button({
    x: 291,
    y: 321,
    width: 69,
    label: "Back",
    onClick: function() {
        scene = 0;}
});

var restartButton = new Button({
    x: 163,
    y: 269,
    width: 95,
    label: "Restart",
    onClick: function() {
        sean.score = 0;
        miles.score = 0;
        powerUps = [];
        scene = 1;
        startTime = frameCount;
        defaultBall.yVelocity = 0;
        defaultBall.x = 200;
        defaultBall.y = 300;
    }
});

//Goal draw function
var drawFrontOfGoal = function(side) {
    
    var x;
    
    if (side === 'left') {
        x = -50;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + 20 - 4 * i, 274 + 12 * i, x + 68 - 1.5 * i, x + 319 + 12 * i);
        }
        for (var j = 0; j < 5; j++) {
            line(x + j * 12 + 20, 265, x + j * 12, 388 + 2 * j);
        }
        
            
        //bars
        stroke(0, 0, 0);
        strokeWeight(10);
        line(x + 20, 261, x + 72, 264);
        line(x - 34, 386, x + 58, 394);
        line(x + 72, 264, x + 58, 394);
        line(x - 34, 390,x + 20, 261); 
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x + 20, 261, x + 72, 264);
        line(x - 34, 386, x + 58, 394);
        line(x + 72, 264, x + 58, 394);
        line(x - 34, 390, x + 20, 261); 
    }
    else if (side === 'right') {
        x = 450;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x - 20 + 4 * i, 256 + 12 * i, x - 68 + 1.5 * i, 276 + 12 * i);
        }
        for (var j = 0; j < 5; j++) {
            line(x - j * 12 - 20, 265, x - j * 12, 388 + 2 * j);
        }
        

        //bars
        stroke(0, 0, 0);
        strokeWeight(10); 
        line(x - 20, 261, x - 72, 264);
        line(x + 34, 386, x - 58, 394);
        line(x - 72, 264, x - 58, 394);
        line(x + 34, 390,x -20, 261); 
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x - 20, 261, x - 72, 264);
        line(x + 34, 386, x - 58, 394);
        line(x - 72, 264, x - 58, 394);
        line(x + 34, 390, x -20, 261); 
    }
}; 

//draw top of goal 
var drawTopOfGoal = function(side) {

    var x;
    
    if (side === 'left') {
        x = -50;
        //netting
        for (var i = 0; i < 8; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + 67 - 7 * i, 227 + 5 * i, x + 89 - 2 * i, 234 + 4 * i);
        }
        for (var j = 0; j < 5; j++) {
            strokeWeight(2);
            line(x + j * 12 + 20, 265, x + j * 9 + 60, 228 + 2 * j);
        }
        
        //bars
        stroke(0, 0, 0);
        strokeWeight(10);
        line(x + 20, 261, x + 58, 230);
        line(x + 72, 264, x + 104, 228);
        line(x + 58, 230, x + 104, 228);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x + 20, 261, x + 58, 230);
        line(x + 72, 264, x + 104, 228);
        line(x + 58, 230, x + 104, 228);
    }
    else if (side === 'right') {
        x = 450;
        //netting
        for (var i = 0; i < 8; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x - 67 + 7 * i, 227 + 5 * i, x - 89 + 2 * i, 234 + 4 * i);
        }
        for (var j = 0; j < 5; j++) {
            line(x - j * 12 - 20, 265, x - j * 9 - 60, 228 + 2 * j);
        }
        
        //bars
        stroke(0, 0, 0);
        strokeWeight(10);
        line(x - 18, 340, x + 5, 369);
        line(x - 20, 261, x - 58, 230);
        line(x - 72, 264, x - 104, 228);
        line(x - 58, 230, x - 104, 228);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x - 20, 261, x - 72, 264);
        line(x - 20, 261, x - 58, 230);
        line(x - 72, 264, x - 104, 228);
        line(x - 58, 230, x - 104, 228);
    }
};

//draw back of goal fucntion allows things to go into goals
var drawBackOfGoal = function(side) {
    
    var x;
    
    if (side === 'left') {
        x = -50;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + 67 - 4 * i, 227 + 10 * i, x + 100 - 1.5 * i, 229 + 10 * i);
        }
        for (var j = 0; j < 7; j++) {
            line(x + j * 8 + 53, 233, x + j * 8 + 30, 337 + 2 * j);
        }
        for (var i = 0; i < 7; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + 21 - 4 * i, 258 + 15 * i, x + 49 - 3.1 * i, 232 + 15 * i);
        }
        for (var j = 0; j < 4; j++) {
            line(x + j * 7 + 27, 254 - j * 7, x + j * 8 - 8, 361 - 8 * j);
        } 
        
        //bars
        stroke(0, 0, 0);
        strokeWeight(10);
        line(x + 104, 228, x + 88, 347);
        line(x + 58, 230, x + 18, 340);
        line(x + 18, 340, x - 5, 369);
        line(x + 88, 347, x + 18, 340);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x + 104, 228, x + 88, 347);
        line(x + 58, 230, x + 18, 340);
        line(x + 18, 340, x - 5, 369);
        line(x + 88, 347, x + 18, 340);
    }
    else if (side === 'right') {
        x = 450;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x - 67 + 4 * i, 227 + 10 * i, x - 100 + 1.5 * i, 229 + 10 * i);
        }
        for (var j = 0; j < 7; j++) {
            line(x - j * 8 - 53, 233, x - j * 8 - 30, 337 + 2 * j);
        }
        for (var i = 0; i < 7; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x - 21 + 4 * i, 258 + 15 * i, x - 49 + 3.1 * i, 232 + 15 * i);
        }
        for (var j = 0; j < 4; j++) {
            line(x - j * 7 - 27, 254 - j * 7, x - j * 8 + 8, 361 - 8 * j);
        } 

        
        //bars
        stroke(0, 0, 0);
        strokeWeight(10);
        line(x - 104, 228, x - 88, 347);
        line(x - 58, 230, x - 18, 340);
        line(x - 18, 340, x + 5, 369);
        line(x - 88, 347, x - 18, 340);
        line(x - 20, 261, x - 72, 264);
        line(x - 20, 261, x - 58, 230);
        line(x - 72, 264, x - 104, 228);
        line(x - 58, 230, x - 104, 228);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x - 104, 228, x - 88, 347);
        line(x - 58, 230, x - 18, 340);
        line(x - 18, 340, x + 5, 369);
        line(x - 88, 347, x - 18, 340);
        line(x - 20, 261, x - 72, 264);
        line(x - 20, 261, x - 58, 230);
        line(x - 72, 264, x - 104, 228);
        line(x - 58, 230, x - 104, 228);
    }
};

var drawScoreBoard = function() {
    stroke(255, 255, 255);
    strokeWeight(7);
    fill(255, 0, 0);
    rect(262, 0, 135, 63);
    fill(255, 255, 255);
    textSize(20);
    text("Timer:", 269, 5);
    textSize(40);
    text(floor(timer()/60), 306, 19);
    fill(234, 0, 255);
    rect(0, 0, 147, 63);
    fill(250, 250, 250);
    textSize(20);
    text("Score:", 3, 5);
    textSize(40);
    text(sean.score + " - " + miles.score, 18, 19); 
};

//Make the splash screen
var drawSplash = function(){
    background(43, 166, 204);
    textAlign(LEFT,TOP);      
    fill(0, 255, 60);
    rect(0, height*0.90, width, height*0.10);
    seanBitmoji(176, 326, 60);
    milesDrawBitmoji(233, 298, 40);
    fill(179, 39, 186);
    textSize(40);
    fill(3, 3, 3);
    rect(0, 0, 399, 75);
    fill(247, 252, 247);
    text("Head Soccer!", 81, 13);
    textSize(27);
    text("Score as many goals as you can in two minutes!", 59, 173, 300, 100);
    image(getImage("cute/TreeShort"), 31, 324, 42, 78);
    image(getImage("cute/TreeTall"), 334, 324, 42, 78);
    startButton.draw();
    settingsButton.draw();
    displayBall.draw();
    milesBall.draw();
};

var drawSettings = function() {
    scene = 2;
    background(29, 193, 222);
    textSize(40);
    fill(5, 5, 5);
    text("Goals of the Game:  ", 33, 22);
    textSize(15);
    text("Score more goals than your opponent in 90 seconds!", 9, 78);
    textSize(12);
    text("To score, kick the ball with your character and get it into the net!", 9, 102);
    textSize(30);
    fill(255, 0, 34);
    text("How To Play: ", 9, 130);
    textSize(15);
    text("If you are Sean, use", 9, 167);
    text("W to jump, A to move left, and D to move right", 9, 187);
    text("If you are Miles use", 10, 207);
    text("Up arrow to jump, Right Arrow to move right,", 12, 227);
    text("and Left Arrow to move left", 12, 247);
    seanBitmoji(63, 328, 125);
    milesDrawBitmoji(212, 277, 75);
    backButton.draw();
    settingsBall.draw();
};

var drawEndScreen = function() {
    var winner;
    if (miles.score === sean.score) {
        winner = "draw";
    }
    else if (miles.score > sean.score) {
        winner = "Miles";
    } 
    else {
        winner = "Sean";
    }
    noStroke();
    fill(255, 0, 230);
    rect(50, 200, 307, 40, 15);
    textSize(30);
    fill(255, 255, 255);
    if (winner === "draw") {
        fill(255, 0, 230);
        rect(94, 200, 175, 40, 15);
        fill(255, 255, 255);
        text("The game is a tie", 100, 200);
    }
    else {
        fill(255, 0, 230);
        rect(50, 200, 307, 40, 15);
        fill(255, 255, 255);
        text(winner + " wins the match!", 60, 200);
    }
    restartButton.draw();
};

var audienceArray = [];
for (var i = 0; i < 100; i ++) {
    audienceArray.push(color(random(100,255), random(100,255), random(100,255)));
}

mouseClicked = function(){
    if(scene === 0) {
        startButton.handleMouseClick();
        settingsButton.handleMouseClick();
    }
    else if (scene === 2) { 
        backButton.handleMouseClick();
    }
    else if (scene === 3) {
        restartButton.handleMouseClick();
    }
};

draw = function() {
    if (scene === 0) {
        drawSplash();
    }
    else if (scene === 1) {
        timer();
        
        background(0, 64, 255);
        
        //Crowd
        for ( var j = 1; j < 5; j++) {
            for ( var i = 1; i < 20; i++) {
                stroke(255, 255, 255);
                strokeWeight(2);
                fill(audienceArray[i * j]);
                ellipse(-12 + i * 25, 60 + j * 30, 20, 20);
            }
        }


        drawScoreBoard();
        
        //grass
        image(getImage("cute/GrassBlock"), -10, 274, 422, 166);
    
        //call in draw goal functions
        drawBackOfGoal('left');
        drawBackOfGoal('right');
        
        //Player Movement
        
        //moving for sean
        if (keyIsPressed) {
            //jumping
            if (key.toString() === 'w') {
                sean.characterJump();
            }
            //moving right
            if (key.toString() === 'd') {
                sean.right();
            }
            else if (key.toString() === 'a') {
                sean.left();
            }
        }
        
        //moving for miles
        if (keyIsPressed) {
            //jumping
            if (keyCode === UP) {
                miles.characterJump();
            }
             //moving right
            if (keyCode === 39) {
                miles.right();
            }
            //moving left
            else if (keyCode === 37) {
                miles.left();
            }
        }
        
        //continuos things happening to players
        for (var i in players) { 
            if (players[i].y <= 308) {
                players[i].fall();
            }
            players[i].drawShadow();
            players[i].drawCharacter();
            players[i].powerUpCollision();
            players[i].poweredUp();
            //resets score after restart because onClick for restartButton was not doing it
            if ((frameCount - startTime)/60 < 1) {
                players[i].score = 0;
            }
        }
        if (defaultBall.goalReset() === true) {
            miles.y = 309;
            miles.x = 300;
            sean.y = 309;
            sean.x = 100;
        }
        
        //continuous things happening to ball
        if (defaultBall.groundCollideDetect()) {
            defaultBall.groundCollide();
        }
        
        defaultBall.kicked();
        defaultBall.goal();
        defaultBall.goalReset();
        defaultBall.netCollide();
        defaultBall.move();
        defaultBall.drawShadow();
        //Places Ball in or ontop of goal
        if (defaultBall.y < 243) {
            drawTopOfGoal("left");
            drawTopOfGoal("right");
            defaultBall.draw();
        }
        else {
            defaultBall.draw();
            drawTopOfGoal("left");
            drawTopOfGoal("right");            
        }
        
        drawFrontOfGoal('left');
        drawFrontOfGoal('right');        
    
        //continuos for powerUps
        powerUpGenerate();
        for (var i in powerUps) {
            powerUps[i].draw();
        }
    }
    
    //Settings screen
    else if (scene === 2) {
        drawSettings();
    }
    
    else if (scene === 3) {
        drawEndScreen();
    }
    
/*
    //debug
    println(miles.name + " is " + dist(miles.x, miles.y+70, defaultBall.x, defaultBall.y));
    println("square " + sqrt(sq(miles.x-defaultBall.x)+sq(miles.y+70-defaultBall.y)));
    //players[i].kickDetect();
    */
    //println("goalTime " + goalTime);
    //println(frameCount);
    //strokeWeight(5);
    //line(0, 243, 400, 243);
    //println(powerUps[0].shown);
    //println(floor((frameCount - miles.powerUpsTime)/60));
    //println(miles.score);
};
