size(400, 400, 1);

//Bitmoji Code
var milesDrawBitmojiBody=function(x,y,h){
//body,coat
strokeWeight(h*0.03);
fill(22,87,24);
rect(x-h*0.62,y+h*0.84,h*1.24,h*0.76,h*0.27);

//hood
fill(22, 87, 24);
noStroke();
rect(x-h*0.33,y+h*0.36,h*0.66,h*0.675,h*0.20);
ellipse(x,y+h*0.43,h*0.68,h*0.84);

//initials
//M
strokeWeight(h*0.04);
stroke(0, 153, 255);
line(x-h*0.54,y+h*1.40,x-h*0.43,y+h*1.06);
line(x-h*0.43,y+h*1.06,x-h*0.32,y+h*1.40);
line(x-h*0.32,y+h*1.40,x-h*0.21,y+h*1.06);
line(x-h*0.21,y+h*1.06,x-h*0.10,y+h*1.40);
//W
line(x+h*0.10,y+h*1.06,x+h*0.21,y+h*1.40);
line(x+h*0.21,y+h*1.40,x+h*0.32,y+h*1.06);
line(x+h*0.32,y+h*1.06,x+h*0.43,y+h*1.40);
line(x+h*0.43,y+h*1.40,x+h*0.54,y+h*1.06);

noStroke();
};

var milesDrawBtimojiHead=function(x,y,h){
//head
noStroke();
fill(235, 191, 97);
ellipse(x,y+h*0.47,h*0.55,h*0.70);

//eyes
strokeWeight(h*0.015);
stroke(0,0,0);
fill(255, 255, 255);
ellipse(x-h*0.11,y+h*0.43,h*0.10,h*0.06);//whites
ellipse(x+h*0.11,y+h*0.43,h*0.10,h*0.06);
//iris
noStroke();
fill(21, 57, 130);
ellipse(x-h*0.11,y+h*0.43,h*0.04,h*0.04);
ellipse(x+h*0.105,y+h*0.43,h*0.04,h*0.04);
//pupils
fill(0,0,0);
ellipse(x-h*0.11,y+h*0.43,h*0.01,h*0.01);
ellipse(x+h*0.11,y+h*0.43,h*0.01,h*0.01);

//eye brows
stroke(66, 24, 1);
strokeWeight(h*0.015);
fill(0,0,0,0);
arc(x-h*0.12,y+h*0.42,h*0.15,h*0.12,212,339);
arc(x+h*0.11,y+h*0.42,h*0.15,h*0.17,197,331);

//furrowed brow
stroke(41, 27, 8);
strokeWeight(h*0.005);
fill(245, 207, 147);
arc(x+h*0.08,y+h*0.28,h*0.12,h*0.02,-180,0); 
arc(x+h*0.07,y+h*0.26,h*0.12,h*0.02,-170,0); 
arc(x+h*0.08,y+h*0.30,h*0.11,h*0.02,-180,0); 

//hair
noStroke();
fill(102, 41, 8);
arc(x-h*0.04,y+h*0.25,h*0.23,h*0.24,68,303);
rect(x-h*0.17,y+h*0.15,h*0.17,h*0.13,10);
ellipse(x+h*0.03,y+h*0.17,h*0.23,h*0.09);

//shadows in hood
fill(0, 0, 0);
rect(x-h*0.23,y+h*0.65,h*0.46,h*0.25);
stroke(0, 0, 0);
strokeWeight(h*0.04);
line(x-h*0.24,y+h*1.00,x-h*0.27,y+h*0.44);
line(x+h*0.24,y+h*1.00,x+h*0.27,y+h*0.44);
fill(235, 191, 97,0);
strokeWeight(h*0.05);
arc(x,y+h*0.49,h*0.53,h*0.76,190,350);


//zipper
fill(0,0,0);
stroke(2);
strokeWeight(h*0.05);
line(x,y+h*1.50,x,y+h*0.74);

//neck
noStroke();
fill(133, 102, 53);
rect(x-h*0.14,y+h*0.72,h*0.27,h*0.20);

//collar
stroke(0, 0, 0);
fill(22, 87, 24,0);
arc(x,y+h*0.83,h*0.50,h*0.17,-20,200);


//nose
strokeWeight(h*0.01);
stroke(186, 104, 31);
fill(0,0,0,0);
arc(x,y+h*0.53,h*0.07,h*0.15,-192,24);

//mask
stroke(0, 0, 0);
fill(56, 49, 49);
arc(x,y+h*0.485,h*0.49,h*0.71,5,175);
stroke(207, 142, 37);
strokeWeight(h*0.05);
point(x+h*0.14,y+h*0.56);
point(x-h*0.09,y+h*0.64);
point(x+h*0.16,y+h*0.66);
point(x-h*0.16,y+h*0.56);
point(x,y+h*0.54);
point(x+h*0.09,y+h*0.76);
point(x-h*0.09,y+h*0.74);
point(x+h*0.05,y+h*0.66);
stroke(0,0,0);
strokeWeight(h*0.03);
line(x-h*0.27,y+h*0.53,x,y+h*0.50);
line(x+h*0.27,y+h*0.53,x,y+h*0.50);
noStroke();

};

var milesDrawBitmoji=function(bitmojiX,bitmojiY,bitmojiH){
    noStroke();
    milesDrawBitmojiBody(bitmojiX,bitmojiY,bitmojiH);
    milesDrawBtimojiHead(bitmojiX,bitmojiY,bitmojiH);
    //stroke(255, 0, 0);
    //line(bitmojiX-30, bitmojiY + 40, bitmojiX + 30, bitmojiY + 40);
    //line(bitmojiX, bitmojiY, bitmojiX, bitmojiY + 80);
};

var seanBitmoji = function(x, y, h){
    noStroke();
    fill(255,205,148); //skin tone
    ellipse(x-(h/150), y-(h/150), h/150*87, h/150*100); //head
    fill(255, 255, 255);
    arc(x-(h/150*42), y+(h/150*37), h/150*28, h/150*55, h/150*0, h/150*361); //left chisel
    arc(x+(h/150*42), y+(h/150*37), h/150*28, h/150*55, h/150*0, h/150*360); //right chisel
    fill(150, 75, 0);//brown hair
    quad(x-(h/150*50), y-(h/150), x-(h/150*37), y-(h/150*32), x-(h/150), y-(h/150*50), x-(h/150*30), y+(h/150*12));//left hair
    quad(x+(h/150*49), y-(h/150*2), x+(h/150*34), y-(h/150*32), x+(h/150*13), y-(h/150*50), x+(h/150*35), y+(h/150*14));//right hair
    ellipse(x-(h/150), y-(h/150*37), h/150*62, h/150*28); //top hair
    strokeWeight(1);
    stroke(0, 0, 0);
    fill(150, 75, 0);//brown eyes fill
    ellipse(x-(h/150*10), y-(h/150), h/150*6, h/150*4); //left eye
    ellipse(x+(h/150*12), y-(h/150), h/150*6, h/150*4); //right eye
    fill(255,205,148); //skin tone
    bezier(x,y,x+(h/150*21),y+h/150*22,x-h/150*8,y+h/150*20,x-h/150*4,y+h/150*15);//nose
    
    fill(255, 255, 255);//white fill for teeth
    arc(x+(h/150*1), y+(h/150*25), h/150*30, h/150*13,1,180);//mouth
    line(x-(h/150*15), y+(h/150*26), x+(h/150*16), y+(h/150*24)); //top of mouth
    fill(63, 51, 77);
    noStroke();
    quad(x-(h/150*35), y+(h/150*82), x+(h/150*45), y+(h/150*83), x+(h/150*45), y+(h/150*69), x-(h/150*39), y+(h/150*35));
    quad(x-(h/150*31), y+(h/150*80), x+(h/150*52), y+(h/150*25), x+(h/150*48), y+(h/150*85), x-(h/150*33), y+(h/150*83));
    fill(5, 5, 5);
    
    arc(x+(h/150*2), y-(h/150*41), h/150*63, h/150*29, 182, 360);
    rect(x-(h/150*31), y-(h/150*34), h/150*66, h/150*16);
    rect(x-(h/150*32),y-(h/150*29),h/150*23,h/150*-13);
    rect(x+(h/150*15), y-(h/150*28), h/150*19, h/150*-13);
    fill(150, 75, 0);
    fill(43, 240, 73);
    textSize(h/150*22);
    text("SF", x-(h/150*11),y+(h/150*62),h/150*265,h/150*220);

};

//global variables
var goalTime;
var stopGoalTime = null;

//player class
var Player = function (config) {
    this.name = config.name || "default Player";
    this.x = config.x || 200;
    this.xOriginal = config.x || 200;
    this.y = config.y || 200;
    this.size = config.size || 50;
    this.speed = config.speed || 3;
    this.jump = config.jump || 10;
    this.drawCharacter = config.drawCharacter || function() {};
    this.score = config.score || 0;
    this.xVeloctiy = config.xVelocity || 0;
    this.yVelocity = config.yVelocity || 0;
    this.jumpTime = config.jumpTime || null;
    this.kickPower = config.kickPower || 1;
};

var sean = new Player({
    name: "Sean",
    x: 100,
    xOriginal: 100,
    y: 309,
    size: 69,
    drawCharacter: function() {
        seanBitmoji(this.x - 3, this.y + 45, this.size);
        ellipse(this.x, this.y + 70, 20, 20);
    }
});

var miles = new Player({
    name: "Miles",
    x: 300,
    xOriginal: 300,
    y: 309,
    size: 40,
    drawCharacter: function() {
        milesDrawBitmoji(this.x, this.y + 20, this.size);
        ellipse(this.x, this.y + 70, 20, 20);
    }
});

var players = [
    sean,
    miles
];

//Ball Class
var Ball = function(config) {
    this.x  = config.x || 200;
    this.y = config.y || 300;
    this.size = config.size || 30;
    this.xVelocity = config.xVelocity || 0;
    this.yVelocity = config.yVelocity || 0;
    this.yVeloctiyTemp = config.yVelocityTemp || 0;
    this.collideTime = config.collideTime || 0;
};

//Ball instance
var defaultBall = new Ball({x: 200});

//balls array
var balls = [
    defaultBall
];

//balls draw method
Ball.prototype.draw = function() {
    this.y = constrain(this.y, -200, 390 - this.size);
    this.x = constrain(this.x, this.size - 30, 430 - this.size);
    fill(255, 255, 255);
    stroke(0, 0, 0);
    strokeWeight(this.size * 0.03);
    ellipse(this.x, this.y, this.size, this.size);
    fill(0, 0, 0);
    //middle hexagon
    quad(this.x - this.size/6, this.y, this.x + this.size/6, this.y, this.x + this.size/10, this.y - this.size/6, this.x - this.size/10, this.y - this.size/6);
    quad(this.x - this.size/6, this.y, this.x + this.size/6, this.y, this.x + this.size/10, this.y + this.size/6, this.x - this.size/10, this.y + this.size/6);
    var offsetX = this.size * 0.34;
    var offsetY = this.size * 0.45;
    //bottom right hexagon
    triangle(this.x - this.size/6 + offsetX, this.y + offsetY, this.x + this.size/15 + offsetX, this.y - this.size/6 + offsetY, this.x - this.size/10 + offsetX, this.y - this.size/6 + offsetY);
    triangle(this.x - this.size/6 + offsetX, this.y - offsetY, this.x + this.size/17 + offsetX, this.y + this.size/6 - offsetY, this.x - this.size/10 + offsetX, this.y + this.size/6 - offsetY);
    //top left hexagon
    triangle(this.x + this.size/6 - offsetX, this.y - offsetY, this.x + this.size/10 - offsetX, this.y + this.size/6 - offsetY, this.x - this.size/16 - offsetX, this.y + this.size/6 - offsetY);
    //bottom left hexagon
    triangle(this.x + this.size/7 - offsetX, this.y + offsetY, this.x + this.size/10 - offsetX, this.y - this.size/6 + offsetY, this.x - this.size/16 - offsetX, this.y - this.size/6 + offsetY);
};

Ball.prototype.move = function() {
    if (this.x < 400 && this.x > 0) {
        this.x += this.xVelocity;
    }
    if (this.y + - this.size < 390) {
        var t = (frameCount - this.collideTime) / 60;
        if (this.yVelocity > 0) {
            this.yVelocity -= 2.5 * t*t;
        } else {
            this.yVelocity -= 1 * t*t;
        }
    }
    this.yVelocity = constrain(this.yVelocity, -80, 80);
    this.y -= this.yVelocity;
};

Ball.prototype.groundCollide = function() {
    this.collideTime = frameCount;
    if (abs(this.yVelocity) < 100) {
        this.yVelocity = -this.yVelocity / 3;
    } else {
        this.yVelocity = 30;
    }
    //println(frameCount - this.collideTime);
};

Ball.prototype.groundCollideDetect = function() {
    if (this.y + this.size >= 390) {
        //println('collide');
        return true;
    }
};

Ball.prototype.goal = function() {
    if (!stopGoalTime) {
        if (this.x > 360 && this.y > 230) {
            sean.score ++;
            goalTime = frameCount;
            stopGoalTime = true;
            //println("sean's goal");
        }
        else if (this.x < 40 && this.y > 230) {
            miles.score ++;
            goalTime = frameCount;
            stopGoalTime = true;
            //println("miles' goal");
        }
    }
};

Ball.prototype.goalReset = function() {
    if (frameCount - goalTime === 90) {
        this.x = 200;
        this.y = 300;
        stopGoalTime = false;
        println("goalReset");
        return true;
    }
};

Ball.prototype.netCollide = function() {
    if (this.x > 360 && abs(243-this.y) < 7) {
        this.yVelocity = 0;
        if (this.y < 243) {
            this.xVelcity = -2;
            this.yVelocity = 5;

        }
    } 
    if (this.x < 40 && abs(243-this.y) < 7) {
        this.yVelocity = 0;
        if (this.y < 243) {
            this.xVelcity = 2;
            this.yVelocity = 5;
        }
    }  
};

//Player Methods

//draw Player method
Player.prototype.drawCharacter = function() {
    this.x = constrain(this.x, 50, width - 50);
    this.y = constrain(this.y, 0, height - 60);
    this.drawCharacter();
};

//move Player methods
Player.prototype.characterJump = function() {
    if (this.y >= 147) {
        this.y -= this.jump;   
    }
    this.yVelocity += this.jump;
    this.jumpTime = frameCount;
};

Player.prototype.fall = function() {
    if (this.y <= 343) {
        var t = (frameCount - this.jumpTime) / 60;
        this.yVelocity = - 20 * t*t;
        this.y -= this.yVelocity;
    }
};

Player.prototype.left = function() {
    if (this.x > 40) {
        this.x -= this.speed;
        this.xVelocity -= this.speed;
    }
};

Player.prototype.right = function() {
    if (this.x < 360) {
        this.x += this.speed;
        this.xVelocity += this.speed;
    }
};

Player.prototype.kickDetect = function() {
    //println("kickdetect");
    if (sqrt(sq(this.x-defaultBall.x)+sq(this.y+70-defaultBall.y)) < 50) {
        return true;
    } else {
        return false;
    }
};

//Ball kick method
Ball.prototype.kicked = function() {
    //println("kick method");
    for (var i in players) {
        if (players[i].kickDetect()) {
            //println(players[i].name + " kicked the ball");
            if (this.x < players[i].x) {
                this.xVelocity = -2 * players[i].kickPower;
            }
            else if (this.x > players[i].x) {
                this.xVelocity = 2 * players[i].kickPower;
            }
            this.yVelocity += 6;
        }
    }
};

//draw shadow method
Player.prototype.drawShadow = function() {
    var shadowSize = (this.y) / 6;
    noStroke();
    fill(84, 84, 84, 100);
    ellipse(this.x, 387, shadowSize,shadowSize / 5); 
};

//Goal draw function
var drawFrontOfGoal = function(side) {
    
    var x;
    
    if (side === 'left') {
        x = -50;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + 20 - 4 * i, 256 + 12 * i, x + 68 - 1.5 * i, x + 276 + 12 * i);
        }
        for (var j = 0; j < 5; j++) {
            line(x + j * 12 + 20, 265, x + j * 12, 388 + 2 * j);
        }
        for (var i = 0; i < 8; i++) {
            stroke(56,56,56);
            strokeWeight(2);
            line(x + 67 - 7 * i, 227 + 5 * i, x + 89 - 2 * i, 234 + 4 * i);
        }
        for (var j = 0; j < 5; j++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + j * 12 + 20, 265, x + j * 9 + 60, 228 + 2 * j);
            
        //bars
        stroke(0, 0, 0);
        strokeWeight(10); 
        line(x - 34, 390,x + 20, 261); 
        line(x + 20, 261, x + 72, 264);
        line(x + 72, 264, x + 58, 394);
        line(x + 20, 261, x + 58, 230);
        line(x + 72, 264, x + 104, 228);
        line(x + 58, 230, x + 104, 228);
        line(x - 34, 386, x + 58, 394);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x - 34, 390, x + 20, 261); 
        line(x + 20, 261, x + 72, 264);
        line(x + 72, 264, x + 58, 394);
        line(x + 20, 261, x + 58, 230);
        line(x + 72, 264, x + 104, 228);
        line(x + 58, 230, x + 104, 228);
        line(x - 34, 386, x + 58, 394);
        }
    }
    else if (side === 'right') {
        x = 450;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x - 20 + 4 * i, 256 + 12 * i, x - 68 + 1.5 * i, 276 + 12 * i);
        }
        for (var j = 0; j < 5; j++) {
            line(x - j * 12 - 20, 265, x - j * 12, 388 + 2 * j);
        }
        for (var i = 0; i < 8; i++) {
            stroke(56,56,56);
            strokeWeight(2);
            line(x - 67 + 7 * i, 227 + 5 * i, x - 89 + 2 * i, 234 + 4 * i);
        }
        for (var j = 0; j < 5; j++) {
            line(x - j * 12 - 20, 265, x - j * 9 - 60, 228 + 2 * j);
        }

        //bars
        stroke(0, 0, 0);
        strokeWeight(10); 
        line(x + 34, 390,x -20, 261); 
        line(x - 20, 261, x - 72, 264);
        line(x - 72, 264, x - 58, 394);
        line(x - 20, 261, x - 58, 230);
        line(x - 72, 264, x - 104, 228);
        line(x - 58, 230, x - 104, 228);
        line(x + 34, 386, x - 58, 394);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x + 34, 390, x -20, 261); 
        line(x - 20, 261, x - 72, 264);
        line(x - 72, 264, x - 58, 394);
        line(x - 20, 261, x - 58, 230);
        line(x - 72, 264, x - 104, 228);
        line(x - 58, 230, x - 104, 228);
        line(x + 34, 386, x - 58, 394);
    }
}; 

//draw back of goal fucntion allows things to go into goals
var drawBackOfGoal = function(side) {
    
    var x;
    
    if (side === 'left') {
        x = -50;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + 67 - 4 * i, 227 + 10 * i, x + 100 - 1.5 * i, 229 + 10 * i);
        }
        for (var j = 0; j < 7; j++) {
            line(x + j * 8 + 53, 233, x + j * 8 + 30, 337 + 2 * j);
        }
        for (var i = 0; i < 7; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x + 21 - 4 * i, 258 + 15 * i, x + 49 - 3.1 * i, 232 + 15 * i);
        }
        for (var j = 0; j < 4; j++) {
            line(x + j * 7 + 27, 254 - j * 7, x + j * 8 - 8, 361 - 8 * j);
        } 
    }
    else if (side === 'right') {
        x = 450;
        //netting
        for (var i = 0; i < 11; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x - 67 + 4 * i, 227 + 10 * i, x - 100 + 1.5 * i, 229 + 10 * i);
        }
        for (var j = 0; j < 7; j++) {
            line(x - j * 8 - 53, 233, x - j * 8 - 30, 337 + 2 * j);
        }
        for (var i = 0; i < 7; i++) {
            stroke(56, 56, 56);
            strokeWeight(2);
            line(x - 21 + 4 * i, 258 + 15 * i, x - 49 + 3.1 * i, 232 + 15 * i);
        }
        for (var j = 0; j < 4; j++) {
            line(x - j * 7 - 27, 254 - j * 7, x - j * 8 + 8, 361 - 8 * j);
        } 
    }
    
    if (side === 'left') {
        x = -50;
        //bars
        stroke(0, 0, 0);
        strokeWeight(10);
        line(x + 104, 228, x + 88, 347);
        line(x + 58, 230, x + 18, 340);
        line(x + 18, 340, x - 5, 369);
        line(x + 88, 347, x + 18, 340);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x + 104, 228, x + 88, 347);
        line(x + 58, 230, x + 18, 340);
        line(x + 18, 340, x - 5, 369);
        line(x + 88, 347, x + 18, 340);
    }
    else if (side === 'right') {
        x = 450;
        //bars
        stroke(0, 0, 0);
        strokeWeight(10);
        line(x - 104, 228, x - 88, 347);
        line(x - 58, 230, x - 18, 340);
        line(x - 18, 340, x + 5, 369);
        line(x - 88, 347, x - 18, 340);
        stroke(255, 255, 255);
        strokeWeight(7);
        line(x - 104, 228, x - 88, 347);
        line(x - 58, 230, x - 18, 340);
        line(x - 18, 340, x + 5, 369);
        line(x - 88, 347, x - 18, 340);
    }
};

draw = function() {
    background(0, 64, 255);
    
    //grass
    image(getImage("cute/GrassBlock"), -10, 274, 422, 166);

    //call in draw goal functions
    drawBackOfGoal('left');
    drawBackOfGoal('right');
    
    //moving for sean
    if (keyIsPressed) {
        //jumping
        if (key.toString() === 'w') {
            sean.characterJump();
        }
        //moving right
        if (key.toString() === 'd') {
            sean.right();
        }
        else if (key.toString() === 'a') {
            sean.left();
        }
    }
    
    //moving for miles
    if (keyIsPressed) {
        //jumping
        if (keyCode === UP) {
            miles.characterJump();
        }
         //moving right
        if (keyCode === 39) {
            miles.right();
        }
        //moving left
        else if (keyCode === 37) {
            miles.left();
        }
    }
    
    //continuos things happening to players
    for (var i in players) { 
        if (players[i].y <= 308) {
            players[i].fall();
        }
        players[i].drawShadow();
        players[i].drawCharacter();
    }
    if (defaultBall.goalReset() === true) {
        miles.y = 309;
        miles.x = 300;
        sean.y = 309;
        sean.x = 100;
    }
    
    //continuous things happening to ball
    if (defaultBall.groundCollideDetect()) {
        defaultBall.groundCollide();
    }
    
    defaultBall.kicked();
    defaultBall.goal();
    defaultBall.goalReset();
    defaultBall.netCollide();
    defaultBall.move();
    defaultBall.draw();

    drawFrontOfGoal('left');
    drawFrontOfGoal('right');
/*
    //debug
    println(miles.name + " is " + dist(miles.x, miles.y+70, defaultBall.x, defaultBall.y));
    println("square " + sqrt(sq(miles.x-defaultBall.x)+sq(miles.y+70-defaultBall.y)));
    //players[i].kickDetect();
    */
    //println("goalTime " + goalTime);
    //println(frameCount);
    //strokeWeight(5);
    //line(0, 243, 400, 243);
};
